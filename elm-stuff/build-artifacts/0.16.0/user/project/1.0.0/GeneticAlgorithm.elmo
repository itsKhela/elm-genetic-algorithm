Elm.GeneticAlgorithm = Elm.GeneticAlgorithm || {};
Elm.GeneticAlgorithm.make = function (_elm) {
   "use strict";
   _elm.GeneticAlgorithm = _elm.GeneticAlgorithm || {};
   if (_elm.GeneticAlgorithm.values)
   return _elm.GeneticAlgorithm.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Randoms = Elm.Native.Randoms.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var randomInt = F3(function (seed,ci,cs) {
      var rnd = A2($Random.generate,
      A2($Random.$int,ci,cs),
      $Random.initialSeed(seed));
      var result = function () {    var _p0 = rnd;return _p0._0;}();
      return result;
   });
   var initialNativeSeed = $Basics.round($Native$Randoms.getFloat);
   var initial_population_number = 100;
   var possible_gen_values = _U.list([_U.chr("a")
                                     ,_U.chr("b")
                                     ,_U.chr("c")
                                     ,_U.chr("d")
                                     ,_U.chr("2")
                                     ,_U.chr("M")]);
   var getEffectiveRandomInt = F2(function (x,preSeed) {
      return A3(randomInt,
      (x + 1 + preSeed * 13) * preSeed * x * initialNativeSeed,
      0,
      $List.length(possible_gen_values) - 1);
   });
   var error_element = _U.chr("E");
   var chromosome_length = 10;
   var getRandomChromosome = function (preSeed) {
      return A3($List.foldl,
      F2(function (x,acc) {
         return A2($List._op["::"],
         function () {
            var wrapped = A2($Array.get,
            A2(getEffectiveRandomInt,x,preSeed),
            $Array.fromList(possible_gen_values));
            var res = function () {
               var _p1 = wrapped;
               if (_p1.ctor === "Just") {
                     return _p1._0;
                  } else {
                     return error_element;
                  }
            }();
            return res;
         }(),
         acc);
      }),
      _U.list([]),
      _U.range(1,chromosome_length));
   };
   var initialization = function (numSpecimens) {
      var population = A3($List.foldl,
      F2(function (num,acc) {
         return A2($List._op["::"],
         getRandomChromosome(num * initialNativeSeed),
         acc);
      }),
      _U.list([]),
      _U.range(1,numSpecimens));
      return population;
   };
   var main = $Graphics$Element.show(initialization(initial_population_number));
   return _elm.GeneticAlgorithm.values = {_op: _op
                                         ,chromosome_length: chromosome_length
                                         ,error_element: error_element
                                         ,possible_gen_values: possible_gen_values
                                         ,initial_population_number: initial_population_number
                                         ,initialNativeSeed: initialNativeSeed
                                         ,main: main
                                         ,initialization: initialization
                                         ,getRandomChromosome: getRandomChromosome
                                         ,getEffectiveRandomInt: getEffectiveRandomInt
                                         ,randomInt: randomInt};
};